/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
//#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>


&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

/*
&mmv {
   time-to-max-speed-ms = <680>;
   acceleration-exponent=<1>;
};
*/
/ { 


    behaviors {
		bspdel: backspace_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BKSP>, <&kp DEL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
	td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

        keymap {
                compatible = "zmk,keymap";
        
		default_layer {

		bindings = <
		&kp ESCAPE			&kp Q				&kp W				&kp E				&kp R				&kp T															&kp Y				&kp U				&kp I					&td MINUS O			&kp P			    &kp MINUS
		&kp TAB				&kp A				&mt LCTRL S			&hm LALT D			&hm LGUI F			&kp G															&kp H				&hm RGUI J			&hm RALT K				&mt RCTRL L			&kp SEMICOLON		&kp SQT
		&trans				&kp Z				&kp X				&kp C				&kp V				&kp B															&kp N				&kp M				&td UNDERSCORE COMMA	&td EXCL DOT		&kp SLASH			&kp ENTER
          															&trans				&bspdel				&mt LC(LS(LALT)) SPC &sk LSHIFT			&kp ENTER				&to 1				&kp ENTER			&trans
		>;
		};

		left_layer {
		bindings = <
		&trans				&trans				&kp ATSN			&kp LS(N3)			&kp DLLR			&kp PRCNT														&kp CARET			&kp AMPS			&kp STAR			&kp SEMI 			&trans				&trans
		&trans				&trans				&kp EQUAL			&kp LS(COMMA)		&kp LS(DOT)			&kp SQT															&kp BSLH			&kp LBRC			&kp RBRC			&kp PIPE			&to 3				&trans
		&trans				&kp TILDE			&kp LC(LG(LS(N4)))	&kp LA(LBKT)		&kp LA(RBKT)		&kp DQT															&kp LBKT			&kp LPRN			&kp RPRN			&kp RBKT			&kp SLASH			&trans
					    											&trans				&sk ESC				&to 0			 	&sk ESC				&kp ENTER				&to 2				&kp ENTER			&trans
		>;
		};
		
		right_layer {
		bindings = <
		&trans				&kp ESC				&kp C_PP			&kp C_PREV			&kp C_NEXT			&kp LS(MINUS)													&kp MINUS  			&kp N7				&kp N8				&kp N9				&trans				&trans
		&trans				&kp TAB				&trans				&kp C_VOL_DN		&kp C_VOL_UP		&kp LS(EQUAL)													&kp EQUAL			&kp N4				&kp N5				&kp N6				&to 3				&trans
		&trans				&to 4				&trans				&kp SLASH			&trans				&kp DOT			 												&kp N0				&kp N1				&kp N2				&kp N3				&trans				&to 5
					  												&trans				&sk LGUI			&to 0				&sk LGUI			&kp ENTER				&to 2				&kp ENTER			&trans
		>;
		};
		
		tri_layer {
		bindings = <
		//&trans				&trans				&mwh SCROLL_LEFT	&mmv MOVE_UP		&mwh SCROLL_RIGHT	&kp NUM_5														&kp LG(LBKT)		&kp LC(LS(TAB))		&kp RC(TAB)			&kp LG(RBKT)		&trans				&trans
		//&trans				&kp F1				&mmv MOVE_LEFT		&mmv MOVE_DOWN		&mmv MOVE_RIGHT		&kp DEL															&kp LEFT			&kp DOWN			&kp UP				&kp RIGHT			&kp ENTER			&trans
		//&trans				&td LG(GRAVE) GRAVE &mkp RCLK			&mwh SCROLL_UP		&mwh SCROLL_DOWN	&trans	   														&trans				&mkp LCLK			&kp PG_DN			&kp K_VOL_DN		&trans				&trans
		&trans				&trans				&trans			&trans		&trans		&kp NUM_5														&kp LG(LBKT)		&kp LC(LS(TAB))		&kp RC(TAB)			&kp LG(RBKT)		&trans				&trans
		&trans				&kp F1				&trans			&trans		&trans		&kp DEL															&kp LEFT			&kp DOWN			&kp UP				&kp RIGHT			&kp ENTER			&trans
		&trans				&td LG(GRAVE) GRAVE &trans			&trans		&trans		&trans	   														&trans				&trans				&kp PG_DN			&kp K_VOL_DN		&trans				&trans
																	&trans				&trans				&to 0				&trans				&kp ENTER				&to 1				&kp ENTER			&trans
					
		//&trans &trans  &trans    &trans    &trans    &kp NUM_5 			&kp LG(LBKT)   &kp LC(LS(TAB))   &kp RC(TAB) &kp LG(RBKT) &trans &trans
		//&trans &kp F1 &trans &trans &trans &kp DEL  						&kp LEFT &kp DOWN  &kp UP &kp RIGHT &trans &trans
		//&trans &td LG(GRAVE) GRAVE &trans  &trans &trans &trans   				&trans &kp PG_DN  &kp K_VOL_DN  &trans &trans   &trans

		>;
		};	
		bt {
		bindings = <
		&bt BT_SEL 0		&bt BT_SEL 1		&bt BT_SEL 2		&bt BT_SEL 3		&bt BT_SEL 4		&trans															&trans				&trans				&trans				&trans				&trans				&trans
		&trans				&trans				&trans				&trans				&trans				&trans 															&trans				&trans				&trans				&trans				&trans				&trans
		&trans				&bt BT_PRV			&bt BT_NXT			&bt BT_CLR			&out OUT_BLE		&out OUT_USB  													&trans				&trans				&trans				&trans				&trans				&trans
																	&trans				&trans				&to 0					&trans			&trans					&to 1				&trans				&trans
		>;
		};

		game_layer {
                        bindings = <
		&kp TAB				&kp Q				&kp W				&kp E				&kp R				&kp T															&kp N5				&kp N4				&kp N3				&kp N2				&kp N1				&kp ESC
    	&kp LCTRL			&kp A				&kp S				&kp D				&kp F				&kp G															&kp H				&mt RGUI J			&mt LALT K			&kp L				&kp SEMICOLON		&kp SQT
    	&kp LSHFT			&kp Z				&kp X				&kp C				&kp V				&kp B															&kp N				&kp M				&kp COMMA			&kp DOT				&kp SLASH			&kp ENTER
																	&kp ESC				&trans				&kp SPACE				&trans			&trans					&to 1				&kp BKSP			&to 0
                        >;
                };

		qwerty_layer {
                        bindings = <
    	&kp TAB     		&kp Q				&kp W				&kp E				&kp R				&kp T															&kp Y				&kp U				&kp I				&kp O				&kp P				&kp BSPC
    	&kp LCTRL   		&kp A				&kp S				&mt LALT D			&mt LGUI F			&kp G															&kp H				&mt RGUI J			&mt LALT K			&kp L				&kp SEMICOLON		&kp SQT
    	&kp LSHFT   		&kp Z				&kp X				&kp C				&kp V				&kp B															&kp N				&kp M				&kp COMMA			&kp DOT				&kp SLASH			&kp ESCAPE
																	&kp ESC				&mo 7				&kp SPACE				&trans			&trans					&to 1				&kp BACKSPACE		&to 1
                        >;
                };
	};
};
