/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
// #include <dt-bindings/zmk/mouse.h>


&mt {
        flavor = "balanced";
};

/*
&mmv {
   time-to-max-speed-ms = <680>;
   acceleration-exponent=<2>;
};
*/
/ { 


    behaviors {
	td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

        keymap {
                compatible = "zmk,keymap";
                default_layer {
		bindings = <
		&trans &kp Y &kp C &kp L &kp M &kp K 						&kp Z &kp F  &kp U    &td MINUS COMMA  &kp BKSP &trans 
		&trans &kp I &kp S &mt LALT R &mt LGUI T &kp G 			       	&kp P &mt RGUI N &mt RALT E &kp A &kp O &trans 
		&trans &kp Q &kp V &kp W &kp D &kp J				        &kp B &kp H  &td UNDERSCORE SLASH &td EXCL DOT &kp X &trans 
          				&trans &sk LSHIFT &mt LC(LS(LALT)) SPC  				&to 3 &sk RCTRL &trans 
		>;
		};

		qwerty_layer {
                        bindings = <
    	&kp TAB     &kp Q           &kp W           &kp E               &kp R           &kp T           &kp Y           &kp U               &kp I           &kp O           &kp P                   &kp BSPC
    	&kp LCTRL   &kp A           &kp S           &mt LALT D          &mt LGUI F      &kp G           &kp H           &mt RGUI J          &mt LALT K      &kp L           &kp SEMICOLON           &kp SQT
    	&kp LSHFT   &kp Z           &kp X           &kp C               &kp V           &kp B           &kp N           &kp M               &kp COMMA       &kp DOT         &kp SLASH               &kp ESCAPE
                                                    &kp ESC             &mo 7           &kp SPACE       &kp ENTER       &kp BACKSPACE       &to 0
                        >;
                };

		game_layer {
                        bindings = <
		&kp TAB     &kp Q           &kp W           &kp E               &kp R           &kp T           &kp Y           &kp U               &kp I           &kp O           &kp P                   &kp BSPC
    	&kp LCTRL   &kp A           &kp S           &kp D               &kp F           &kp G           &kp H           &mt RGUI J          &mt LALT K      &kp L           &kp SEMICOLON           &kp SQT
    	&kp LSHFT   &kp Z           &kp X           &kp C               &kp V           &kp B           &kp N           &kp M               &kp COMMA       &kp DOT         &kp SLASH               &kp ESCAPE
                                                    &kp ESC             &mo 7           &kp SPACE       &kp ENTER       &kp BACKSPACE   &to 0
                        >;
                };

       		left_layer {
		bindings = <
		&trans &kp ESC  &kp ATSN   &td LC(LG(LS(N4))) LS(N3) &kp DLLR    &kp PRCNT		&kp CARET &kp LS(COMMA) &kp LS(DOT) &kp SEMI &kp BKSP &trans
		&trans &kp TAB    &kp EQUAL    &kp LA(RBKT)      &kp LA(LS(RBKT))     &kp SQT 		&kp BSLH &kp LBRC  &kp RBRC &kp PIPE  &kp ENTER &trans
		&trans &kp TILDE    &kp LA(N3) 	&kp LA(LBKT) &kp LA(LS(LBKT))  &kp DQT 	&kp LBKT &kp LPRN &kp RPRN &kp RBKT  &to 5 &to 2
					    &trans &sk LSHIFT &to 0 					&to 4 &sk RALT &trans
		>;
		};
		
		right_layer {
		bindings = <
		&trans &kp ESC  &kp C_PP &kp C_PREV  &kp C_NEXT  &kp LS(MINUS)    			&kp MINUS  &kp N7 &kp N8 &kp N9 &trans &trans
		&trans &kp TAB  &trans   &kp C_VOL_DN  &kp C_VOL_UP  &kp LS(EQUAL) 			&kp EQUAL &kp N4  &kp N5  &kp N6   &kp ENTER &trans
		&trans &to 4  &kp AMPS &kp SLASH &kp STAR &kp DOT    			&kp N0 &kp N1 &kp N2 &kp N3  &trans &trans
					  &trans &sk LGUI &to 0  				  &to 4 &sk RALT &trans
		>;
		};
		
		tri_layer {
		bindings = <
		//&trans &trans  &mwh SCROLL_LEFT    &mmv MOVE_UP    &mwh SCROLL_RIGHT    &kp NUM_5 			&kp LG(LBKT)   &kp LC(LS(TAB))   &kp RC(TAB) &kp LG(RBKT) &trans &trans
		//&trans &kp F1 &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &kp DEL  						&kp LEFT &kp DOWN  &kp UP &kp RIGHT &kp ENTER &trans
		//&trans &td LG(GRAVE) GRAVE &mkp RCLK  &mwh SCROLL_UP &mwh SCROLL_DOWN &trans   				&mkp LCLK &kp PG_DN  &kp K_VOL_DN  &trans &trans   &trans
		&trans &trans  &trans    &trans    &trans    &kp NUM_5 			&kp LG(LBKT)   &kp LC(LS(TAB))   &kp RC(TAB) &kp LG(RBKT) &trans &trans
		&trans &kp F1 &trans &trans &trans &kp DEL  						&kp LEFT &kp DOWN  &kp UP &kp RIGHT &kp ENTER &trans
		&trans &td LG(GRAVE) GRAVE &trans  &trans &trans &trans   				&trans &kp PG_DN  &kp K_VOL_DN  &trans &trans   &trans
					 &trans &trans &to 0  					&to 3 &sk RALT &trans
		>;
		};	
		bt {
		bindings = <
		&trans &trans  &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
		&trans &trans  &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
		&trans &bt BT_PRV  &bt BT_NXT &bt BT_CLR &trans &trans   				&trans &trans  &trans  &trans &trans   &trans
					 &trans &trans &to 0  					&to 3 &trans &trans
		>;
		};	

		gaming_numbers {
		bindings = <
		&kp 1 &kp 2  &kp 3 &kp 4 &kp 5 &kp 6 &trans &trans &trans &trans &trans &trans
		&trans &trans  &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
		&trans &trans  &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
					 &trans &trans &trans  					&to 3 &trans &trans
		>;
		};	
        
	};
};
